// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ESCORT
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum SubscriptionType {
  BASIC
  PREMIUM
  VIP
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum CommissionStatus {
  PENDING
  CALCULATED
  PAID
  CANCELLED
}

enum TransactionType {
  PAYMENT
  REFUND
  COMMISSION
  PAYOUT
  SUBSCRIPTION
  BONUS
  WITHDRAWAL
}

// User model
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String
  avatar            String?
  role              UserRole  @default(USER)
  verified          Boolean   @default(false)
  verificationLevel Int       @default(0) // 0-3, 3 being fully verified
  createdAt         DateTime  @default(now())
  lastActive        DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Auth fields
  password          String?
  emailVerified     DateTime?
  resetToken        String?
  resetTokenExpiry  DateTime?

  // Escort specific fields
  escortProfile     EscortProfile?
  subscription      Subscription?

  // Relations
  sentMessages      Message[]  @relation("MessageSender")
  receivedMessages  Message[]  @relation("MessageRecipient")
  conversations     ConversationParticipant[]
  bookingsAsClient  Booking[]  @relation("ClientBookings")
  bookingsAsEscort  Booking[]  @relation("EscortBookings")
  reviews           Review[]   @relation("ReviewAuthor")
  reviewsReceived   Review[]   @relation("ReviewTarget")
  notifications     Notification[]
  paymentMethods    PaymentMethod[]
  transactions      Transaction[]
  verifications     Verification[]
  availabilities    Availability[]
  savedSearches     SavedSearch[]
  accounts          Account[]
  sessions          Session[]
  images            Image[]
  
  // Financial relations
  digitalWallet     DigitalWallet?
  payouts           Payout[]
  commissionsEarned Commission[] @relation("CommissionRecipient")
  commissionsOwed   Commission[] @relation("CommissionPayer")
  
  @@map("users")
}

// Image model for all types (avatars, galleries, verification docs)
model Image {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Image details
  type      String    // 'avatar', 'gallery', 'verification'
  url       String
  publicId  String    @unique // Cloudinary public ID
  
  // Metadata
  width     Int
  height    Int
  format    String
  bytes     Int
  
  // Organization
  position  Int       @default(0)
  isMain    Boolean   @default(false)
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@map("images")
}

// Escort Profile
model EscortProfile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic info
  age           Int?
  height        Int?      // in cm
  weight        Int?      // in kg
  city          String?
  phone         String?
  bio           String?
  services      String[]  // Array of services
  languages     String[]  // Array of languages
  
  // Pricing
  hourlyRate    Float?
  minimumHours  Int?      @default(1)
  
  // Status
  isActive      Boolean   @default(true)
  isAvailable   Boolean   @default(true)
  isFeatured    Boolean   @default(false)
  
  // Stats
  totalViews    Int       @default(0)
  totalLikes    Int       @default(0)
  totalBookings Int       @default(0)
  
  // Media
  photos        Photo[]
  videos        Video[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("escort_profiles")
}

// Photo model
model Photo {
  id              String         @id @default(cuid())
  url             String
  caption         String?
  order           Int            @default(0)
  isMain          Boolean        @default(false)
  escortProfileId String?
  escortProfile   EscortProfile? @relation(fields: [escortProfileId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  
  @@map("photos")
}

// Video model
model Video {
  id              String         @id @default(cuid())
  url             String
  thumbnailUrl    String?
  title           String?
  duration        Int?           // in seconds
  order           Int            @default(0)
  escortProfileId String?
  escortProfile   EscortProfile? @relation(fields: [escortProfileId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  
  @@map("videos")
}

// Subscription model
model Subscription {
  id            String           @id @default(cuid())
  userId        String           @unique
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Subscription details
  type          SubscriptionType @default(BASIC)
  isActive      Boolean          @default(true)
  startDate     DateTime         @default(now())
  endDate       DateTime?
  autoRenew     Boolean          @default(true)
  
  // Pricing
  price         Float            @default(0)
  currency      String           @default("EUR")
  billingCycle  String           @default("monthly") // monthly, yearly
  
  // Stripe integration
  stripeId      String?          @unique
  stripeStatus  String?          // active, past_due, canceled, etc.
  
  // Features
  features      Json?            // Subscription features
  limits        Json?            // Usage limits
  
  // Trial
  trialStart    DateTime?
  trialEnd      DateTime?
  
  // Cancellation
  cancelAt      DateTime?
  canceledAt    DateTime?
  cancelReason  String?
  
  // Relations
  commissions   Commission[]
  events        SubscriptionEvent[]
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@map("subscriptions")
}

// Conversation model
model Conversation {
  id           String                     @id @default(cuid())
  participants ConversationParticipant[]
  messages     Message[]
  lastMessage  String?
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  
  @@map("conversations")
}

// Junction table for conversation participants
model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  joinedAt       DateTime     @default(now())
  
  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

// Message model
model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId    String
  recipient      User         @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  content        String
  read           Boolean      @default(false)
  readAt         DateTime?
  attachments    String[]     // Array of file URLs
  messageType    String       @default("text") // text, image, video, audio
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@map("messages")
}

// Booking model
model Booking {
  id        String        @id @default(cuid())
  clientId  String
  client    User          @relation("ClientBookings", fields: [clientId], references: [id], onDelete: Cascade)
  escortId  String
  escort    User          @relation("EscortBookings", fields: [escortId], references: [id], onDelete: Cascade)
  
  // Booking details
  date      DateTime
  startTime DateTime
  endTime   DateTime
  duration  Int           // in minutes
  
  // Pricing
  hourlyRate Float
  totalAmount Float
  
  // Status
  status    BookingStatus @default(PENDING)
  
  // Location
  location  String?
  address   String?
  
  // Notes
  notes     String?
  
  // Relations
  payment   Payment?
  commissions Commission[]
  
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  @@map("bookings")
}

// Availability model
model Availability {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime
  startTime DateTime
  endTime   DateTime
  available Boolean  @default(true)
  price     Float?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, date, startTime])
  @@map("availabilities")
}

// Review model
model Review {
  id        String   @id @default(cuid())
  authorId  String
  author    User     @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  targetId  String
  target    User     @relation("ReviewTarget", fields: [targetId], references: [id], onDelete: Cascade)
  rating    Int      // 1-5
  comment   String
  verified  Boolean  @default(false)
  bookingId String?  // Optional link to booking
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("reviews")
}

// Payment model
model Payment {
  id            String        @id @default(cuid())
  bookingId     String        @unique
  booking       Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  // Amount details
  amount        Float
  currency      String        @default("EUR")
  platformFee   Float         @default(0)
  stripeFee     Float         @default(0)
  netAmount     Float         // amount - platformFee - stripeFee
  
  // Status
  status        PaymentStatus @default(PENDING)
  
  // Payment method
  paymentMethod String
  paymentData   Json?         // Encrypted payment data
  
  // Stripe integration
  stripeId      String?       @unique
  paymentIntentId String?
  
  // Timestamps
  paidAt        DateTime?
  refundedAt    DateTime?
  
  // Metadata
  metadata      Json?
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@map("payments")
}

// Payment Method model
model PaymentMethod {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // card, bank_transfer, crypto
  provider  String   // stripe, paypal, etc.
  data      Json     // Encrypted payment data
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("payment_methods")
}

// Transaction model
model Transaction {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Transaction details
  type          TransactionType
  amount        Float
  currency      String          @default("EUR")
  status        PaymentStatus   @default(PENDING)
  
  // Description
  description   String?
  reference     String?         // External reference
  
  // Source
  bookingId     String?
  subscriptionId String?
  payoutId      String?
  
  // Payment integration
  stripeId      String?         @unique
  paymentIntentId String?
  
  // Fees
  platformFee   Float?          @default(0)
  stripeFee     Float?          @default(0)
  netAmount     Float?          // amount - fees
  
  // Timestamps
  processedAt   DateTime?
  completedAt   DateTime?
  
  // Metadata
  metadata      Json?
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([userId, type])
  @@index([status])
  @@index([createdAt])
  @@map("transactions")
}

// Verification model
model Verification {
  id          String             @id @default(cuid())
  userId      String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String             // identity, address, phone, etc.
  status      VerificationStatus @default(PENDING)
  documents   String[]           // Array of document URLs
  data        Json?              // Verification data
  reviewedBy  String?
  reviewedAt  DateTime?
  notes       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  @@map("verifications")
}

// Notification model
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // booking, message, system
  title     String
  content   String
  read      Boolean  @default(false)
  data      Json?    // Additional data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("notifications")
}

// Sponsor model
model Sponsor {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String   // apartment, service, etc.
  price       Float?
  location    String?
  images      String[] // Array of image URLs
  contact     Json     // Contact information
  isActive    Boolean  @default(true)
  isPremium   Boolean  @default(false)
  startDate   DateTime @default(now())
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("sponsors")
}

// Search/Filter models
model SavedSearch {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  filters   Json     // Saved filter criteria
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("saved_searches")
}

// Analytics model
model Analytics {
  id        String   @id @default(cuid())
  userId    String?
  event     String   // page_view, profile_view, booking_attempt, etc.
  data      Json?    // Event data
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  
  @@map("analytics")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Digital Wallet model
model DigitalWallet {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Balance
  balance           Float    @default(0)
  currency          String   @default("EUR")
  
  // Earnings
  totalEarnings     Float    @default(0)
  availableEarnings Float    @default(0)
  pendingEarnings   Float    @default(0)
  
  // Withdrawals
  totalWithdrawn    Float    @default(0)
  minimumWithdrawal Float    @default(50)
  
  // Bank details
  bankAccountName   String?
  bankAccountNumber String?
  bankRoutingNumber String?
  bankSwiftCode     String?
  
  // Status
  isActive          Boolean  @default(true)
  isVerified        Boolean  @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("digital_wallets")
}

// Payout model
model Payout {
  id            String       @id @default(cuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Amount
  amount        Float
  currency      String       @default("EUR")
  fee           Float        @default(0)
  netAmount     Float        // amount - fee
  
  // Status
  status        PayoutStatus @default(PENDING)
  
  // Payment details
  paymentMethod String       // bank_transfer, paypal, etc.
  paymentData   Json?        // Encrypted payment details
  
  // Tracking
  stripePayoutId String?     @unique
  transactionId  String?
  
  // Timestamps
  requestedAt   DateTime     @default(now())
  processedAt   DateTime?
  completedAt   DateTime?
  
  // Metadata
  notes         String?
  adminNotes    String?
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@map("payouts")
}

// Commission model
model Commission {
  id            String           @id @default(cuid())
  
  // Parties involved
  payerId       String           // User who pays the commission
  payer         User             @relation("CommissionPayer", fields: [payerId], references: [id], onDelete: Cascade)
  recipientId   String           // User who receives the commission
  recipient     User             @relation("CommissionRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  
  // Source
  bookingId     String?          // If commission is from booking
  booking       Booking?         @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  subscriptionId String?         // If commission is from subscription
  subscription  Subscription?    @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  // Amounts
  baseAmount    Float            // Original transaction amount
  rate          Float            // Commission rate (percentage)
  amount        Float            // Commission amount
  currency      String           @default("EUR")
  
  // Status
  status        CommissionStatus @default(PENDING)
  
  // Timestamps
  calculatedAt  DateTime?
  paidAt        DateTime?
  
  // Metadata
  type          String           // booking, subscription, referral, etc.
  description   String?
  metadata      Json?
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@map("commissions")
}

// Subscription Event model
model SubscriptionEvent {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  // Event details
  type           String       // created, updated, canceled, payment_failed, etc.
  status         String?      // Event status
  
  // Data
  previousData   Json?        // Previous state
  currentData    Json?        // Current state
  
  // Metadata
  stripeEventId  String?      @unique
  metadata       Json?
  
  createdAt      DateTime     @default(now())
  
  @@map("subscription_events")
} 